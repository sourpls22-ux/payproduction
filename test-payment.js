#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–ø–ª–∞—Ç—ã
 * –ó–∞–ø—É—Å–∫: node test-payment.js
 */

import axios from 'axios'

const BASE_URL = 'http://localhost:5000'
const TEST_USER = {
  email: 'test@example.com',
  password: 'test123'
}

async function testPaymentFlow() {
  console.log('üß™ [TEST] Starting payment flow test...')
  
  try {
    // 1. –õ–æ–≥–∏–Ω–∏–º—Å—è
    console.log('üß™ [TEST] Step 1: Login...')
    const loginResponse = await axios.post(`${BASE_URL}/api/login`, {
      email: TEST_USER.email,
      password: TEST_USER.password,
      turnstileToken: 'test-token' // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    })
    
    const token = loginResponse.data.token
    console.log('‚úÖ [TEST] Login successful, token:', token.substring(0, 20) + '...')
    
    // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
    console.log('üß™ [TEST] Step 2: Create test payment...')
    const paymentResponse = await axios.post(`${BASE_URL}/api/topup`, {
      amount: 1.0,
      creditAmount: 1.0,
      method: 'crypto',
      testMode: true,
      orderId: `test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    }, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })
    
    const orderId = paymentResponse.data.payment_id
    console.log('‚úÖ [TEST] Payment created, orderId:', orderId)
    console.log('üß™ [TEST] Payment data:', paymentResponse.data)
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
    console.log('üß™ [TEST] Step 3: Complete test payment...')
    const completeResponse = await axios.post(`${BASE_URL}/api/test-payment/${orderId}`, {
      action: 'complete'
    }, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })
    
    console.log('‚úÖ [TEST] Payment completed:', completeResponse.data)
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    console.log('üß™ [TEST] Step 4: Check balance...')
    const balanceResponse = await axios.get(`${BASE_URL}/api/user/balance`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    })
    
    console.log('‚úÖ [TEST] Current balance:', balanceResponse.data.balance)
    
    console.log('üéâ [TEST] All tests passed!')
    
  } catch (error) {
    console.error('‚ùå [TEST] Test failed:', error.response?.data || error.message)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testPaymentFlow()
