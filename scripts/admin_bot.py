#!/usr/bin/env python3
import sqlite3
import requests
import os
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7760908645:AAEZEDxzE14WEXtQk8AtgFzjNIhy6BuUXEc"
ADMIN_CHAT_ID = "1119283257"  # –í–∞—à Chat ID
DB_PATH = "/var/www/payproduction/backend/database.sqlite"

def send_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'HTML'
    }
    try:
        response = requests.post(url, data=payload, timeout=10)
        return response.json()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

def get_db_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    return sqlite3.connect(DB_PATH)

def delete_user(user_id):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("DELETE FROM profiles WHERE user_id = ?", (user_id,))
        profiles_deleted = cursor.rowcount
        
        # –£–¥–∞–ª–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("DELETE FROM payments WHERE user_id = ?", (user_id,))
        payments_deleted = cursor.rowcount
        
        # –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("DELETE FROM users WHERE id = ?", (user_id,))
        user_deleted = cursor.rowcount
        
        conn.commit()
        conn.close()
        
        if user_deleted > 0:
            return f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω\nüóëÔ∏è –ü—Ä–æ—Ñ–∏–ª–µ–π —É–¥–∞–ª–µ–Ω–æ: {profiles_deleted}\nüí≥ –ü–ª–∞—Ç–µ–∂–µ–π —É–¥–∞–ª–µ–Ω–æ: {payments_deleted}"
        else:
            return f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {str(e)}"

def change_balance(user_id, new_balance):
    """–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute("UPDATE users SET balance = ? WHERE id = ?", (new_balance, user_id))
        conn.commit()
        
        if cursor.rowcount > 0:
            conn.close()
            return f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${new_balance}"
        else:
            conn.close()
            return f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {str(e)}"

def list_users():
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        cursor.execute("SELECT id, email, balance, created_at FROM users ORDER BY id DESC LIMIT 10")
        users = cursor.fetchall()
        conn.close()
        
        if users:
            result = "üë• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
            for user in users:
                result += f"ID: {user[0]}\nEmail: {user[1]}\n–ë–∞–ª–∞–Ω—Å: ${user[2]}\n–î–∞—Ç–∞: {user[3]}\n\n"
            return result
        else:
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {str(e)}"

def get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–π—Ç–∞"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT COUNT(*) FROM users")
        users_count = cursor.fetchone()[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ñ–∏–ª–µ–π
        cursor.execute("SELECT COUNT(*) FROM profiles")
        profiles_count = cursor.fetchone()[0]
        
        # –û–±—â–∏–π –±–∞–ª–∞–Ω—Å
        cursor.execute("SELECT SUM(balance) FROM users")
        total_balance = cursor.fetchone()[0] or 0
        
        conn.close()
        
        return f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ KissBlow:</b>

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_count}
üë§ –ü—Ä–æ—Ñ–∏–ª–µ–π: {profiles_count}
üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${total_balance}
üïê –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"""
        
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"

def process_command(message_text, chat_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Chat ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if message_text == "/debug":
        return f"–í–∞—à Chat ID: {chat_id}"
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É Chat ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    # if chat_id != ADMIN_CHAT_ID:
    #     return "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
    
    parts = message_text.split()
    command = parts[0].lower()
    
    if command == "/start":
        return """ü§ñ <b>KissBlow Admin Bot</b>

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∞–π—Ç–∞
/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/delete_user [ID] - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/balance [ID] [–°–£–ú–ú–ê] - –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
/debug - –ü–æ–∫–∞–∑–∞—Ç—å Chat ID

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
/delete_user 123
/balance 123 100"""
    
    elif command == "/stats":
        return get_stats()
    
    elif command == "/users":
        return list_users()
    
    elif command == "/delete_user":
        if len(parts) < 2:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /delete_user 123"
        try:
            user_id = int(parts[1])
            return delete_user(user_id)
        except ValueError:
            return "‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
    
    elif command == "/balance":
        if len(parts) < 3:
            return "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∏ —Å—É–º–º—É: /balance 123 100"
        try:
            user_id = int(parts[1])
            balance = float(parts[2])
            return change_balance(user_id, balance)
        except ValueError:
            return "‚ùå ID –∏ —Å—É–º–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏"
    
    else:
        return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ KissBlow Admin Bot –∑–∞–ø—É—â–µ–Ω...")
    
    # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
    offset = 0
    
    while True:
        try:
            response = requests.get(url, params={'offset': offset, 'timeout': 30})
            data = response.json()
            
            if data['ok'] and data['result']:
                for update in data['result']:
                    offset = update['update_id'] + 1
                    
                    if 'message' in update:
                        message = update['message']
                        chat_id = message['chat']['id']
                        text = message.get('text', '')
                        
                        if text.startswith('/'):
                            result = process_command(text, chat_id)
                            send_message(chat_id, result)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            import time
            time.sleep(5)

if __name__ == "__main__":
    main()
